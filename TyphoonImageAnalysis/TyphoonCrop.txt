// This program uniformly crops and rotates sets of Typhoon images of the same chip in different fluorescence channels and saves them to a "Processed Images" folder.


// Determine the OS for directory pathing purposes.  Windows uses "\", while other operating systems use "/"
slash = "/";
sysType = getInfo("os.name");
if (indexOf(sysType, "Windows") != -1) {
	slash = "\\";
}

// Define this script's directory and its parent
scriptHome = File.getParent(getInfo("macro.filepath")) + slash;
scriptParent = File.getParent(scriptHome) + slash;


// Defines the output directories based on the script's location and our directory structure
csvOutput = scriptParent + "ProcessedData" + slash + "TyphoonCSVs" + slash;
imageOutput = scriptParent + "ProcessedData" + slash + "TyphoonImages" + slash;
metadataOutput = scriptParent + "ProcessedData" + slash + "Metadata" + slash;
File.makeDirectory(scriptParent + "ProcessedData");
File.makeDirectory(csvOutput);
File.makeDirectory(imageOutput);
File.makeDirectory(metadataOutput);


// Define the directory of the images to be analyzed
imageHome = scriptParent + "RawData" + slash + "TyphoonImages" + slash;

 
// Get the list of files in the images' directory.  If it's a .gel file, add it to a new list out of which we'll analyze images.  If it's a text file, that file contains our run-specific information
list = getFileList(imageHome);
imageList = newArray(0);
for (i = 0; i < list.length; i++) {
	if (indexOf(list[i], ".gel") >= 0) {
		imageList = Array.concat(imageList, list[i]);
	}
	if (indexOf(list[i], ".txt") >= 0) {
		runInfoTXT = list[i];
	}
}



// Get the date and time in YYYYMMDD-HHMM format
getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);

//	Make them all 2-numeral for consistency's sake
if (month < 9) { month = "0" + toString(month+1); }    // Zero-indexed
	else { month = toString(month+1); }
if (dayOfMonth < 10) { dayOfMonth = "0" + toString(dayOfMonth); }
	else { dayOfMonth = toString(dayOfMonth); }
if (hour < 10) { hour = "0" + toString(hour); }
	else { hour = toString(hour); }
if (minute < 10) { minute = "0" + toString(minute); }
	else { minute = toString(minute); }
runTime = toString(year) + month + dayOfMonth + "-" + hour + minute;




// Set the analysis values for this chip.  These values are unique to each set of images due to minor differences in chip placement on the Typhoon scanner
rotationAngle = -2.5;
xStart = 557;
yStart = 3422;



// This function prepares the raw images for analysis
function cropImages(input, output, filename) {
	
	// Define the dimensions of our processed images
	cropwidth = 1020;
	cropheight = 1806;

	open(input + filename);
	run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
	
	// Typhoon .gel files must be linearized before they can be saved in any other format (.tiff, .bmp) because the Typhoon software encodes pixel intensities on a different scale.  See ReadMe for details
	run("Linearize GelData", "scale=21025");
	
	// Crop and rotate based on pre-determined values
	run("Rotate... ", "angle=rotationAngle grid=1 interpolation=Bilinear enlarge");
	makeRectangle(xStart, yStart, cropwidth, cropheight);
	run("Crop");
	
	// Remove image noise (dead pixels, specks of dust)
	run("Subtract Background...", "rolling=15 light");
	
	// Save the processed image	
	savename = split(filename, ".");
	saveAs("tiff", imageOutput + savename[0] + ".tif");
	run("Close All");

	// Save metadata
	print("\\Clear");
	print("TyphoonCrop Metadata:");
	print("     Script:  " + scriptHome + "TyphoonCrop.txt");
	print("     Run Time:  " + runTime);
	print("     rotationAngle:  " + rotationAngle);
	print("     xStart:  " + xStart);
	print("     yStart:  " + yStart);
	print("     cropwidth:  " + cropwidth);
	print("     cropheight:  " + cropheight);
	selectWindow("Log");
	saveAs("Text", metadataOutput + "Metadata_TyphoonCrop.txt");
}

File.copy(imageHome + runInfoTXT, imageOutput + "runInfo.txt");

// Iterate the cropImages function over the list of files containing ".gel"
for (i = 0; i < imageList.length; i++) {
	cropImages(imageHome, imageOutput, imageList[i]);
}


// Clean up windows and results table for the next script call
run("Close All");
run("Clear Results");

runMacro(scriptHome + "AnalyzeFluorescence.txt");
